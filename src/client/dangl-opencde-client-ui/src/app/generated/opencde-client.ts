//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import {
  mergeMap as _observableMergeMap,
  catchError as _observableCatch,
} from 'rxjs/operators';
import {
  Observable,
  throwError as _observableThrow,
  of as _observableOf,
} from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import {
  HttpClient,
  HttpHeaders,
  HttpResponse,
  HttpResponseBase,
} from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable({
  providedIn: 'root',
})
export class AuthenticationClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  getAuthenticationMetadata(): Observable<AuthGet> {
    let url_ = this.baseUrl + '/foundation/1.0/auth';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetAuthenticationMetadata(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetAuthenticationMetadata(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<AuthGet>;
            }
          } else
            return _observableThrow(response_) as any as Observable<AuthGet>;
        })
      );
  }

  protected processGetAuthenticationMetadata(
    response: HttpResponseBase
  ): Observable<AuthGet> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as AuthGet);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf<AuthGet>(null as any);
  }
}

@Injectable({
  providedIn: 'root',
})
export class CurrentUserClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  getCurrentUserData(): Observable<UserGet> {
    let url_ = this.baseUrl + '/foundation/1.0/current-user';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetCurrentUserData(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetCurrentUserData(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<UserGet>;
            }
          } else
            return _observableThrow(response_) as any as Observable<UserGet>;
        })
      );
  }

  protected processGetCurrentUserData(
    response: HttpResponseBase
  ): Observable<UserGet> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as UserGet);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as any[]);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf<UserGet>(null as any);
  }
}

@Injectable({
  providedIn: 'root',
})
export class VersionsClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  getApiVersions(): Observable<VersionsGet> {
    let url_ = this.baseUrl + '/foundation/versions';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetApiVersions(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetApiVersions(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<VersionsGet>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<VersionsGet>;
        })
      );
  }

  protected processGetApiVersions(
    response: HttpResponseBase
  ): Observable<VersionsGet> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as VersionsGet);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf<VersionsGet>(null as any);
  }
}

@Injectable({
  providedIn: 'root',
})
export class OpenCdeDownloadClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  getDocumentDiscoveryData(
    documentSelectionData: SelectDocuments
  ): Observable<DocumentDiscoverySessionInitialization> {
    let url_ = this.baseUrl + '/api/opencde/1.0/select-documents';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(documentSelectionData);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetDocumentDiscoveryData(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetDocumentDiscoveryData(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<DocumentDiscoverySessionInitialization>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<DocumentDiscoverySessionInitialization>;
        })
      );
  }

  protected processGetDocumentDiscoveryData(
    response: HttpResponseBase
  ): Observable<DocumentDiscoverySessionInitialization> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as DocumentDiscoverySessionInitialization);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf<DocumentDiscoverySessionInitialization>(null as any);
  }
}

@Injectable({
  providedIn: 'root',
})
export class OpenCdeDownloadIntegrationClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  getSessionSimpleAuthData(
    documentSessionId: string
  ): Observable<SimpleAuthToken> {
    let url_ =
      this.baseUrl +
      '/api/open-cde-integration/download/sessions/{documentSessionId}/simple-auth';
    if (documentSessionId === undefined || documentSessionId === null)
      throw new Error("The parameter 'documentSessionId' must be defined.");
    url_ = url_.replace(
      '{documentSessionId}',
      encodeURIComponent('' + documentSessionId)
    );
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetSessionSimpleAuthData(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetSessionSimpleAuthData(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<SimpleAuthToken>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<SimpleAuthToken>;
        })
      );
  }

  protected processGetSessionSimpleAuthData(
    response: HttpResponseBase
  ): Observable<SimpleAuthToken> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as SimpleAuthToken);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf<SimpleAuthToken>(null as any);
  }

  setDocumentSelection(
    documentSessionId: string,
    documentSelection: DocumentSelectionPost
  ): Observable<DocumentSelectionGet> {
    let url_ =
      this.baseUrl +
      '/api/open-cde-integration/download/sessions/{documentSessionId}/document-selection';
    if (documentSessionId === undefined || documentSessionId === null)
      throw new Error("The parameter 'documentSessionId' must be defined.");
    url_ = url_.replace(
      '{documentSessionId}',
      encodeURIComponent('' + documentSessionId)
    );
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(documentSelection);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processSetDocumentSelection(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processSetDocumentSelection(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<DocumentSelectionGet>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<DocumentSelectionGet>;
        })
      );
  }

  protected processSetDocumentSelection(
    response: HttpResponseBase
  ): Observable<DocumentSelectionGet> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as DocumentSelectionGet);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf<DocumentSelectionGet>(null as any);
  }

  getDocumentMetadata(documentId: string): Observable<DocumentMetadata> {
    let url_ =
      this.baseUrl +
      '/api/open-cde-integration/download/documents/{documentId}/metadata';
    if (documentId === undefined || documentId === null)
      throw new Error("The parameter 'documentId' must be defined.");
    url_ = url_.replace('{documentId}', encodeURIComponent('' + documentId));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetDocumentMetadata(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetDocumentMetadata(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<DocumentMetadata>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<DocumentMetadata>;
        })
      );
  }

  protected processGetDocumentMetadata(
    response: HttpResponseBase
  ): Observable<DocumentMetadata> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as DocumentMetadata);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf<DocumentMetadata>(null as any);
  }

  getDocumentVersions(documentId: string): Observable<DocumentVersions> {
    let url_ =
      this.baseUrl +
      '/api/open-cde-integration/download/documents/{documentId}/versions';
    if (documentId === undefined || documentId === null)
      throw new Error("The parameter 'documentId' must be defined.");
    url_ = url_.replace('{documentId}', encodeURIComponent('' + documentId));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetDocumentVersions(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetDocumentVersions(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<DocumentVersions>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<DocumentVersions>;
        })
      );
  }

  protected processGetDocumentVersions(
    response: HttpResponseBase
  ): Observable<DocumentVersions> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as DocumentVersions);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf<DocumentVersions>(null as any);
  }

  getDocumentReference(documentId: string): Observable<SelectedDocuments> {
    let url_ =
      this.baseUrl +
      '/api/open-cde-integration/download/documents/{documentId}/reference';
    if (documentId === undefined || documentId === null)
      throw new Error("The parameter 'documentId' must be defined.");
    url_ = url_.replace('{documentId}', encodeURIComponent('' + documentId));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetDocumentReference(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetDocumentReference(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<SelectedDocuments>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<SelectedDocuments>;
        })
      );
  }

  protected processGetDocumentReference(
    response: HttpResponseBase
  ): Observable<SelectedDocuments> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as SelectedDocuments);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf<SelectedDocuments>(null as any);
  }

  getDocumentSelectionData(
    documentSelectionId: string
  ): Observable<DocumentVersion> {
    let url_ =
      this.baseUrl +
      '/api/open-cde-integration/download/document-selections/{documentSelectionId}';
    if (documentSelectionId === undefined || documentSelectionId === null)
      throw new Error("The parameter 'documentSelectionId' must be defined.");
    url_ = url_.replace(
      '{documentSelectionId}',
      encodeURIComponent('' + documentSelectionId)
    );
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetDocumentSelectionData(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetDocumentSelectionData(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<DocumentVersion>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<DocumentVersion>;
        })
      );
  }

  protected processGetDocumentSelectionData(
    response: HttpResponseBase
  ): Observable<DocumentVersion> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as DocumentVersion);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf<DocumentVersion>(null as any);
  }
}

@Injectable({
  providedIn: 'root',
})
export class OpenCdeQueryClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  queryLatestDocumentVersions(
    documentQuery: DocumentQuery
  ): Observable<DocumentDiscoverySessionInitialization> {
    let url_ = this.baseUrl + '/api/opencde/1.0/document-versions';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(documentQuery);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processQueryLatestDocumentVersions(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processQueryLatestDocumentVersions(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<DocumentDiscoverySessionInitialization>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<DocumentDiscoverySessionInitialization>;
        })
      );
  }

  protected processQueryLatestDocumentVersions(
    response: HttpResponseBase
  ): Observable<DocumentDiscoverySessionInitialization> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as DocumentDiscoverySessionInitialization);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf<DocumentDiscoverySessionInitialization>(null as any);
  }
}

@Injectable({
  providedIn: 'root',
})
export class OpenCdeUploadClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  getDocumentDiscoveryData(
    documentUploadData: UploadDocuments
  ): Observable<DocumentUploadSessionInitialization> {
    let url_ = this.baseUrl + '/api/opencde/1.0/upload-documents';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(documentUploadData);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetDocumentDiscoveryData(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetDocumentDiscoveryData(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<DocumentUploadSessionInitialization>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<DocumentUploadSessionInitialization>;
        })
      );
  }

  protected processGetDocumentDiscoveryData(
    response: HttpResponseBase
  ): Observable<DocumentUploadSessionInitialization> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as DocumentUploadSessionInitialization);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf<DocumentUploadSessionInitialization>(null as any);
  }
}

@Injectable({
  providedIn: 'root',
})
export class OpenCdeUploadIntegrationClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  setProjectForUploadSession(
    documentSessionId: string,
    projectSelection: UploadSessionProjectAssignmentPost
  ): Observable<UploadSessionProjectAssignmentResultGet> {
    let url_ =
      this.baseUrl +
      '/api/open-cde-integration/upload/sessions/{documentSessionId}/project';
    if (documentSessionId === undefined || documentSessionId === null)
      throw new Error("The parameter 'documentSessionId' must be defined.");
    url_ = url_.replace(
      '{documentSessionId}',
      encodeURIComponent('' + documentSessionId)
    );
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(projectSelection);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processSetProjectForUploadSession(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processSetProjectForUploadSession(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<UploadSessionProjectAssignmentResultGet>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<UploadSessionProjectAssignmentResultGet>;
        })
      );
  }

  protected processSetProjectForUploadSession(
    response: HttpResponseBase
  ): Observable<UploadSessionProjectAssignmentResultGet> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as UploadSessionProjectAssignmentResultGet);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf<UploadSessionProjectAssignmentResultGet>(null as any);
  }

  getUploadFileDetails(
    documentSessionId: string,
    uploadFileDetails: UploadFileDetails
  ): Observable<DocumentsToUpload> {
    let url_ =
      this.baseUrl +
      '/api/open-cde-integration/upload/sessions/{documentSessionId}/upload-instructions';
    if (documentSessionId === undefined || documentSessionId === null)
      throw new Error("The parameter 'documentSessionId' must be defined.");
    url_ = url_.replace(
      '{documentSessionId}',
      encodeURIComponent('' + documentSessionId)
    );
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(uploadFileDetails);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetUploadFileDetails(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetUploadFileDetails(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<DocumentsToUpload>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<DocumentsToUpload>;
        })
      );
  }

  protected processGetUploadFileDetails(
    response: HttpResponseBase
  ): Observable<DocumentsToUpload> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as DocumentsToUpload);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf<DocumentsToUpload>(null as any);
  }

  markFileUploadAsCompleted(
    documentSessionId: string,
    sessionFileId: string | null
  ): Observable<DocumentVersion> {
    let url_ =
      this.baseUrl +
      '/api/open-cde-integration/upload/sessions/{documentSessionId}/upload-completion/{sessionFileId}';
    if (documentSessionId === undefined || documentSessionId === null)
      throw new Error("The parameter 'documentSessionId' must be defined.");
    url_ = url_.replace(
      '{documentSessionId}',
      encodeURIComponent('' + documentSessionId)
    );
    if (sessionFileId === undefined || sessionFileId === null)
      throw new Error("The parameter 'sessionFileId' must be defined.");
    url_ = url_.replace(
      '{sessionFileId}',
      encodeURIComponent('' + sessionFileId)
    );
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processMarkFileUploadAsCompleted(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processMarkFileUploadAsCompleted(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<DocumentVersion>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<DocumentVersion>;
        })
      );
  }

  protected processMarkFileUploadAsCompleted(
    response: HttpResponseBase
  ): Observable<DocumentVersion> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as DocumentVersion);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf<DocumentVersion>(null as any);
  }

  markFileUploadAsCancelled(
    documentSessionId: string,
    sessionFileId: string | null
  ): Observable<void> {
    let url_ =
      this.baseUrl +
      '/api/open-cde-integration/upload/sessions/{documentSessionId}/upload-cancellation/{sessionFileId}';
    if (documentSessionId === undefined || documentSessionId === null)
      throw new Error("The parameter 'documentSessionId' must be defined.");
    url_ = url_.replace(
      '{documentSessionId}',
      encodeURIComponent('' + documentSessionId)
    );
    if (sessionFileId === undefined || sessionFileId === null)
      throw new Error("The parameter 'sessionFileId' must be defined.");
    url_ = url_.replace(
      '{sessionFileId}',
      encodeURIComponent('' + sessionFileId)
    );
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({}),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processMarkFileUploadAsCancelled(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processMarkFileUploadAsCancelled(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<void>;
            }
          } else return _observableThrow(response_) as any as Observable<void>;
        })
      );
  }

  protected processMarkFileUploadAsCancelled(
    response: HttpResponseBase
  ): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return _observableOf<void>(null as any);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf<void>(null as any);
  }
}

export interface AuthGet {
  oauth2_auth_url?: string | undefined;
  oauth2_token_url?: string | undefined;
  oauth2_dynamic_client_reg_url?: string | undefined;
  http_basic_supported?: boolean;
  supported_oauth2_flows: string[];
  oauth2_required_scopes?: string | undefined;
}

export interface UserGet {
  id?: string | undefined;
  name?: string | undefined;
}

export interface VersionsGet {
  versions: VersionGet[];
}

export interface VersionGet {
  api_id: string;
  version_id: string;
  detailed_version?: string | undefined;
  api_base_url?: string | undefined;
}

/** Data transfer class to convey api errors */
export interface ApiError {
  /** This dictionary contains a set of all errors and their messages */
  errors?: { [key: string]: string[] } | undefined;
}

export interface DocumentDiscoverySessionInitialization {
  select_documents_url: string;
  expires_in: number;
}

export interface SelectDocuments {
  callback: CallbackLink;
  server_context?: string | undefined;
  supported_file_extensions?: string[] | undefined;
}

export interface CallbackLink {
  url: string;
  expires_in: number;
}

export interface SimpleAuthToken {
  jwt: string;
  expiresAt: number;
}

export interface DocumentSelectionGet {
  callbackUrl: string;
}

export interface DocumentSelectionPost {
  documentId: string;
}

export interface DocumentMetadata {
  metadata: DocumentMetadataEntry[];
}

export interface DocumentMetadataEntry {
  name: string;
  value: string[];
  data_type: DataTypeEnum;
}

export enum DataTypeEnum {
  StringEnum = 'string',
  BooleanEnum = 'boolean',
  DateTimeEnum = 'date-time',
  DateEnum = 'date',
  Integer32Enum = 'integer32',
  Integer64Enum = 'integer64',
  NumberEnum = 'number',
  UrlEnum = 'url',
}

export interface DocumentVersions {
  documents: DocumentVersion[];
}

export interface DocumentVersion {
  links: DocumentVersionLinks;
  version_number: string;
  version_index: number;
  creation_date: Date;
  title: string;
  file_description: FileDescription;
  document_id: string;
}

export interface DocumentVersionLinks {
  document_version: LinkData;
  document_version_metadata: LinkData;
  document_version_download: LinkData;
  document_versions: LinkData;
  document_details?: LinkData | undefined;
}

export interface LinkData {
  url: string;
}

export interface FileDescription {
  name: string;
  size_in_bytes: number;
}

export interface SelectedDocuments {
  server_context?: string | undefined;
  documents: DocumentVersion[];
}

export interface DocumentQuery {
  document_ids: string[];
}

export interface DocumentUploadSessionInitialization {
  upload_ui_url: string;
  expires_in: number;
  max_size_in_bytes: number;
}

export interface UploadDocuments {
  callback: CallbackLink;
  server_context?: string | undefined;
  files: FileToUpload[];
}

export interface FileToUpload {
  file_name: string;
  session_file_id: string;
  document_id?: string | undefined;
}

export interface UploadSessionProjectAssignmentResultGet {
  clientCallbackUrl: string;
}

export interface UploadSessionProjectAssignmentPost {
  projectId: string;
}

export interface DocumentsToUpload {
  server_context?: string | undefined;
  documents_to_upload: DocumentToUpload[];
}

export interface DocumentToUpload {
  session_file_id: string;
  upload_file_parts: UploadFilePartInstruction[];
  upload_completion: LinkData;
  upload_cancellation: LinkData;
}

export interface UploadFilePartInstruction {
  url: string;
  http_method: HttpMethodEnum;
  additional_headers?: Headers | undefined;
  include_authorization?: boolean;
  multipart_form_data?: MultipartFormData | undefined;
  content_range_start: number;
  content_range_end: number;
}

export enum HttpMethodEnum {
  POSTEnum = 'POST',
  PUTEnum = 'PUT',
}

export interface Headers {
  values: HeaderValue[];
}

export interface HeaderValue {
  name: string;
  value: string;
}

export interface MultipartFormData {
  prefix: string;
  suffix: string;
}

export interface UploadFileDetails {
  files: UploadFileDetail[];
}

export interface UploadFileDetail {
  size_in_bytes: number;
  session_file_id: string;
}

export class ApiException extends Error {
  message: string;
  status: number;
  response: string;
  headers: { [key: string]: any };
  result: any;

  constructor(
    message: string,
    status: number,
    response: string,
    headers: { [key: string]: any },
    result: any
  ) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(
  message: string,
  status: number,
  response: string,
  headers: { [key: string]: any },
  result?: any
): Observable<any> {
  if (result !== null && result !== undefined) return _observableThrow(result);
  else
    return _observableThrow(
      new ApiException(message, status, response, headers, null)
    );
}

function blobToText(blob: any): Observable<string> {
  return new Observable<string>((observer: any) => {
    if (!blob) {
      observer.next('');
      observer.complete();
    } else {
      let reader = new FileReader();
      reader.onload = (event) => {
        observer.next((event.target as any).result);
        observer.complete();
      };
      reader.readAsText(blob);
    }
  });
}
