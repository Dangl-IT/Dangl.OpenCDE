/*
 * OpenCDE Documents API
 *
 * OpenCDE Documents API Specification
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Dangl.OpenCDE.Shared.OpenCdeSwaggerGenerated.Converters;

namespace Dangl.OpenCDE.Shared.OpenCdeSwaggerGenerated.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DocumentVersion : IEquatable<DocumentVersion>
    {
        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [Required]
        [DataMember(Name="links", EmitDefaultValue=false)]
        public DocumentVersionLinks Links { get; set; }

        /// <summary>
        /// A human readable version number. This is not expected to be in any specific format across CDEs and may hold any value
        /// </summary>
        /// <value>A human readable version number. This is not expected to be in any specific format across CDEs and may hold any value</value>
        [Required]
        [MinLength(1)]
        [DataMember(Name="version_number", EmitDefaultValue=false)]
        public string VersionNumber { get; set; }

        /// <summary>
        /// A machine readable sequence number of the version of the document. The sequence must be ordered, so that newer versions have higher values than previous ones. Each version index must be unique for that document, but there may be gaps in the sequence
        /// </summary>
        /// <value>A machine readable sequence number of the version of the document. The sequence must be ordered, so that newer versions have higher values than previous ones. Each version index must be unique for that document, but there may be gaps in the sequence</value>
        [Required]
        [DataMember(Name="version_index", EmitDefaultValue=true)]
        public int VersionIndex { get; set; }

        /// <summary>
        /// The creation date of the document revision
        /// </summary>
        /// <value>The creation date of the document revision</value>
        [Required]
        [MinLength(1)]
        [DataMember(Name="creation_date", EmitDefaultValue=false)]
        public DateTimeOffset CreationDate { get; set; }

        /// <summary>
        /// A human readable code or identifier
        /// </summary>
        /// <value>A human readable code or identifier</value>
        [Required]
        [MinLength(1)]
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets FileDescription
        /// </summary>
        [Required]
        [DataMember(Name="file_description", EmitDefaultValue=false)]
        public FileDescription FileDescription { get; set; }

        /// <summary>
        /// A machine readable identifier that can be used to uniquely identify this version it future calls - see &#x60;Query&#x60; section
        /// </summary>
        /// <value>A machine readable identifier that can be used to uniquely identify this version it future calls - see &#x60;Query&#x60; section</value>
        [Required]
        [MinLength(1)]
        [DataMember(Name="document_id", EmitDefaultValue=false)]
        public string DocumentId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentVersion {\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  VersionNumber: ").Append(VersionNumber).Append("\n");
            sb.Append("  VersionIndex: ").Append(VersionIndex).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  FileDescription: ").Append(FileDescription).Append("\n");
            sb.Append("  DocumentId: ").Append(DocumentId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DocumentVersion)obj);
        }

        /// <summary>
        /// Returns true if DocumentVersion instances are equal
        /// </summary>
        /// <param name="other">Instance of DocumentVersion to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentVersion other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Links == other.Links ||
                    Links != null &&
                    Links.Equals(other.Links)
                ) && 
                (
                    VersionNumber == other.VersionNumber ||
                    VersionNumber != null &&
                    VersionNumber.Equals(other.VersionNumber)
                ) && 
                (
                    VersionIndex == other.VersionIndex ||
                    
                    VersionIndex.Equals(other.VersionIndex)
                ) && 
                (
                    CreationDate == other.CreationDate ||
                    CreationDate != default &&
                    CreationDate.Equals(other.CreationDate)
                ) && 
                (
                    Title == other.Title ||
                    Title != null &&
                    Title.Equals(other.Title)
                ) && 
                (
                    FileDescription == other.FileDescription ||
                    FileDescription != null &&
                    FileDescription.Equals(other.FileDescription)
                ) && 
                (
                    DocumentId == other.DocumentId ||
                    DocumentId != null &&
                    DocumentId.Equals(other.DocumentId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Links != null)
                    hashCode = hashCode * 59 + Links.GetHashCode();
                    if (VersionNumber != null)
                    hashCode = hashCode * 59 + VersionNumber.GetHashCode();
                    
                    hashCode = hashCode * 59 + VersionIndex.GetHashCode();
                    if (CreationDate != default)
                    hashCode = hashCode * 59 + CreationDate.GetHashCode();
                    if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                    if (FileDescription != null)
                    hashCode = hashCode * 59 + FileDescription.GetHashCode();
                    if (DocumentId != null)
                    hashCode = hashCode * 59 + DocumentId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DocumentVersion left, DocumentVersion right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DocumentVersion left, DocumentVersion right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
