//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import {
  mergeMap as _observableMergeMap,
  catchError as _observableCatch,
} from 'rxjs/operators';
import {
  Observable,
  throwError as _observableThrow,
  of as _observableOf,
} from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import {
  HttpClient,
  HttpHeaders,
  HttpResponse,
  HttpResponseBase,
} from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable({
  providedIn: 'root',
})
export class DanglIdentityClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  loginWithCookie(
    redirectUrl: string | null | undefined,
    model: LoginPost
  ): Observable<void> {
    let url_ = this.baseUrl + '/identity/login?';
    if (redirectUrl !== undefined && redirectUrl !== null)
      url_ += 'redirectUrl=' + encodeURIComponent('' + redirectUrl) + '&';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(model);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processLoginWithCookie(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processLoginWithCookie(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<void>;
            }
          } else return _observableThrow(response_) as any as Observable<void>;
        })
      );
  }

  protected processLoginWithCookie(
    response: HttpResponseBase
  ): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return _observableOf<void>(null as any);
        })
      );
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf<void>(null as any);
  }

  signOutWithSignInManager(): Observable<void> {
    let url_ = this.baseUrl + '/identity/login';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({}),
    };

    return this.http
      .request('delete', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processSignOutWithSignInManager(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processSignOutWithSignInManager(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<void>;
            }
          } else return _observableThrow(response_) as any as Observable<void>;
        })
      );
  }

  protected processSignOutWithSignInManager(
    response: HttpResponseBase
  ): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return _observableOf<void>(null as any);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf<void>(null as any);
  }

  loginAndReturnToken(model: TokenLoginPost): Observable<TokenResponseGet> {
    let url_ = this.baseUrl + '/identity/token-login';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(model);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processLoginAndReturnToken(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processLoginAndReturnToken(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<TokenResponseGet>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<TokenResponseGet>;
        })
      );
  }

  protected processLoginAndReturnToken(
    response: HttpResponseBase
  ): Observable<TokenResponseGet> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as TokenResponseGet);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as TokenResponseGet);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf<TokenResponseGet>(null as any);
  }

  refreshToken(model: TokenRefreshPost): Observable<TokenResponseGet> {
    let url_ = this.baseUrl + '/identity/token-refresh';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(model);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processRefreshToken(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processRefreshToken(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<TokenResponseGet>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<TokenResponseGet>;
        })
      );
  }

  protected processRefreshToken(
    response: HttpResponseBase
  ): Observable<TokenResponseGet> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as TokenResponseGet);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as TokenResponseGet);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status === 401) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf<TokenResponseGet>(null as any);
  }

  register(registerModel: RegisterPost): Observable<void> {
    let url_ = this.baseUrl + '/identity/register';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(registerModel);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processRegister(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processRegister(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<void>;
            }
          } else return _observableThrow(response_) as any as Observable<void>;
        })
      );
  }

  protected processRegister(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return _observableOf<void>(null as any);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf<void>(null as any);
  }

  requestPasswordReset(
    forgotPasswordModel: ForgotPasswordPost
  ): Observable<void> {
    let url_ = this.baseUrl + '/identity/password-forgotten';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(forgotPasswordModel);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processRequestPasswordReset(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processRequestPasswordReset(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<void>;
            }
          } else return _observableThrow(response_) as any as Observable<void>;
        })
      );
  }

  protected processRequestPasswordReset(
    response: HttpResponseBase
  ): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return _observableOf<void>(null as any);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf<void>(null as any);
  }
}

@Injectable({
  providedIn: 'root',
})
export class DocumentsClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * @param filter (optional)
   * @param sort (optional) sort
   * @param thenSort (optional) then sort
   * @param pageSize (optional) page size
   * @param page (optional) page
   */
  getAllDocumentsForProject(
    projectId: string,
    filter: string | null | undefined,
    sort: string | undefined,
    thenSort: string | undefined,
    pageSize: number | undefined,
    page: number | undefined
  ): Observable<PaginationResultOfDocumentGet> {
    let url_ = this.baseUrl + '/api/projects/{projectId}/documents?';
    if (projectId === undefined || projectId === null)
      throw new Error("The parameter 'projectId' must be defined.");
    url_ = url_.replace('{projectId}', encodeURIComponent('' + projectId));
    if (filter !== undefined && filter !== null)
      url_ += 'filter=' + encodeURIComponent('' + filter) + '&';
    if (sort === null) throw new Error("The parameter 'sort' cannot be null.");
    else if (sort !== undefined)
      url_ += 'sort=' + encodeURIComponent('' + sort) + '&';
    if (thenSort === null)
      throw new Error("The parameter 'thenSort' cannot be null.");
    else if (thenSort !== undefined)
      url_ += 'thenSort=' + encodeURIComponent('' + thenSort) + '&';
    if (pageSize === null)
      throw new Error("The parameter 'pageSize' cannot be null.");
    else if (pageSize !== undefined)
      url_ += 'pageSize=' + encodeURIComponent('' + pageSize) + '&';
    if (page === null) throw new Error("The parameter 'page' cannot be null.");
    else if (page !== undefined)
      url_ += 'page=' + encodeURIComponent('' + page) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetAllDocumentsForProject(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetAllDocumentsForProject(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<PaginationResultOfDocumentGet>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<PaginationResultOfDocumentGet>;
        })
      );
  }

  protected processGetAllDocumentsForProject(
    response: HttpResponseBase
  ): Observable<PaginationResultOfDocumentGet> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as PaginationResultOfDocumentGet);
          return _observableOf(result200);
        })
      );
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result404: any = null;
          result404 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as ProblemDetails);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result404
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf<PaginationResultOfDocumentGet>(null as any);
  }

  uploadDocumentMetadataForProject(
    projectId: string,
    documentData: DocumentPost
  ): Observable<DocumentGet> {
    let url_ = this.baseUrl + '/api/projects/{projectId}/documents';
    if (projectId === undefined || projectId === null)
      throw new Error("The parameter 'projectId' must be defined.");
    url_ = url_.replace('{projectId}', encodeURIComponent('' + projectId));
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(documentData);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processUploadDocumentMetadataForProject(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processUploadDocumentMetadataForProject(
                response_ as any
              );
            } catch (e) {
              return _observableThrow(e) as any as Observable<DocumentGet>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<DocumentGet>;
        })
      );
  }

  protected processUploadDocumentMetadataForProject(
    response: HttpResponseBase
  ): Observable<DocumentGet> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as DocumentGet);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf<DocumentGet>(null as any);
  }

  getDocumentById(
    projectId: string,
    documentId: string
  ): Observable<DocumentGet> {
    let url_ =
      this.baseUrl + '/api/projects/{projectId}/documents/{documentId}';
    if (projectId === undefined || projectId === null)
      throw new Error("The parameter 'projectId' must be defined.");
    url_ = url_.replace('{projectId}', encodeURIComponent('' + projectId));
    if (documentId === undefined || documentId === null)
      throw new Error("The parameter 'documentId' must be defined.");
    url_ = url_.replace('{documentId}', encodeURIComponent('' + documentId));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetDocumentById(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetDocumentById(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<DocumentGet>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<DocumentGet>;
        })
      );
  }

  protected processGetDocumentById(
    response: HttpResponseBase
  ): Observable<DocumentGet> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as DocumentGet);
          return _observableOf(result200);
        })
      );
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result404: any = null;
          result404 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as ProblemDetails);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result404
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf<DocumentGet>(null as any);
  }

  deleteDocument(projectId: string, documentId: string): Observable<void> {
    let url_ =
      this.baseUrl + '/api/projects/{projectId}/documents/{documentId}';
    if (projectId === undefined || projectId === null)
      throw new Error("The parameter 'projectId' must be defined.");
    url_ = url_.replace('{projectId}', encodeURIComponent('' + projectId));
    if (documentId === undefined || documentId === null)
      throw new Error("The parameter 'documentId' must be defined.");
    url_ = url_.replace('{documentId}', encodeURIComponent('' + documentId));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({}),
    };

    return this.http
      .request('delete', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processDeleteDocument(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processDeleteDocument(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<void>;
            }
          } else return _observableThrow(response_) as any as Observable<void>;
        })
      );
  }

  protected processDeleteDocument(
    response: HttpResponseBase
  ): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status === 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return _observableOf<void>(null as any);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf<void>(null as any);
  }

  downloadDocument(
    projectId: string,
    documentId: string
  ): Observable<FileResponse> {
    let url_ =
      this.baseUrl + '/api/projects/{projectId}/documents/{documentId}/content';
    if (projectId === undefined || projectId === null)
      throw new Error("The parameter 'projectId' must be defined.");
    url_ = url_.replace('{projectId}', encodeURIComponent('' + projectId));
    if (documentId === undefined || documentId === null)
      throw new Error("The parameter 'documentId' must be defined.");
    url_ = url_.replace('{documentId}', encodeURIComponent('' + documentId));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/octet-stream',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processDownloadDocument(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processDownloadDocument(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<FileResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<FileResponse>;
        })
      );
  }

  protected processDownloadDocument(
    response: HttpResponseBase
  ): Observable<FileResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status === 200 || status === 206) {
      const contentDisposition = response.headers
        ? response.headers.get('content-disposition')
        : undefined;
      const fileNameMatch = contentDisposition
        ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition)
        : undefined;
      const fileName =
        fileNameMatch && fileNameMatch.length > 1
          ? fileNameMatch[1]
          : undefined;
      return _observableOf({
        fileName: fileName,
        data: responseBlob as any,
        status: status,
        headers: _headers,
      });
    } else if (status === 302) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf<FileResponse>(null as any);
  }

  uploadDocumentContent(
    projectId: string,
    documentId: string,
    document: FileParameter | null | undefined
  ): Observable<DocumentGet> {
    let url_ =
      this.baseUrl + '/api/projects/{projectId}/documents/{documentId}/content';
    if (projectId === undefined || projectId === null)
      throw new Error("The parameter 'projectId' must be defined.");
    url_ = url_.replace('{projectId}', encodeURIComponent('' + projectId));
    if (documentId === undefined || documentId === null)
      throw new Error("The parameter 'documentId' must be defined.");
    url_ = url_.replace('{documentId}', encodeURIComponent('' + documentId));
    url_ = url_.replace(/[?&]$/, '');

    const content_ = new FormData();
    if (document !== null && document !== undefined)
      content_.append(
        'document',
        document.data,
        document.fileName ? document.fileName : 'document'
      );

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processUploadDocumentContent(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processUploadDocumentContent(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<DocumentGet>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<DocumentGet>;
        })
      );
  }

  protected processUploadDocumentContent(
    response: HttpResponseBase
  ): Observable<DocumentGet> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as DocumentGet);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf<DocumentGet>(null as any);
  }

  markDocumentContentAsUploaded(
    projectId: string,
    documentId: string
  ): Observable<DocumentContentPreparationPost> {
    let url_ =
      this.baseUrl +
      '/api/projects/{projectId}/documents/{documentId}/content-status';
    if (projectId === undefined || projectId === null)
      throw new Error("The parameter 'projectId' must be defined.");
    url_ = url_.replace('{projectId}', encodeURIComponent('' + projectId));
    if (documentId === undefined || documentId === null)
      throw new Error("The parameter 'documentId' must be defined.");
    url_ = url_.replace('{documentId}', encodeURIComponent('' + documentId));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processMarkDocumentContentAsUploaded(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processMarkDocumentContentAsUploaded(
                response_ as any
              );
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<DocumentContentPreparationPost>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<DocumentContentPreparationPost>;
        })
      );
  }

  protected processMarkDocumentContentAsUploaded(
    response: HttpResponseBase
  ): Observable<DocumentContentPreparationPost> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status === 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result204: any = null;
          result204 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as DocumentContentPreparationPost);
          return _observableOf(result204);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf<DocumentContentPreparationPost>(null as any);
  }

  prepareDocumentUploadViaStorageProvider(
    projectId: string,
    documentId: string,
    documentContentPreparation: DocumentContentPreparationPost
  ): Observable<DocumentContentSasUploadResultGet> {
    let url_ =
      this.baseUrl +
      '/api/projects/{projectId}/documents/{documentId}/content-preparation';
    if (projectId === undefined || projectId === null)
      throw new Error("The parameter 'projectId' must be defined.");
    url_ = url_.replace('{projectId}', encodeURIComponent('' + projectId));
    if (documentId === undefined || documentId === null)
      throw new Error("The parameter 'documentId' must be defined.");
    url_ = url_.replace('{documentId}', encodeURIComponent('' + documentId));
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(documentContentPreparation);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processPrepareDocumentUploadViaStorageProvider(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processPrepareDocumentUploadViaStorageProvider(
                response_ as any
              );
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<DocumentContentSasUploadResultGet>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<DocumentContentSasUploadResultGet>;
        })
      );
  }

  protected processPrepareDocumentUploadViaStorageProvider(
    response: HttpResponseBase
  ): Observable<DocumentContentSasUploadResultGet> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as DocumentContentSasUploadResultGet);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf<DocumentContentSasUploadResultGet>(null as any);
  }
}

@Injectable({
  providedIn: 'root',
})
export class FrontendConfigClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  getFrontendConfig(): Observable<FrontendConfigGet> {
    let url_ = this.baseUrl + '/api/frontend-config';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetFrontendConfig(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetFrontendConfig(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<FrontendConfigGet>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<FrontendConfigGet>;
        })
      );
  }

  protected processGetFrontendConfig(
    response: HttpResponseBase
  ): Observable<FrontendConfigGet> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as FrontendConfigGet);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf<FrontendConfigGet>(null as any);
  }

  getFrontendConfigScript(
    timestamp: string | null | undefined
  ): Observable<FileResponse> {
    let url_ = this.baseUrl + '/api/frontend-config/config.js?';
    if (timestamp !== undefined && timestamp !== null)
      url_ += 'timestamp=' + encodeURIComponent('' + timestamp) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/octet-stream',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetFrontendConfigScript(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetFrontendConfigScript(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<FileResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<FileResponse>;
        })
      );
  }

  protected processGetFrontendConfigScript(
    response: HttpResponseBase
  ): Observable<FileResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200 || status === 206) {
      const contentDisposition = response.headers
        ? response.headers.get('content-disposition')
        : undefined;
      const fileNameMatch = contentDisposition
        ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition)
        : undefined;
      const fileName =
        fileNameMatch && fileNameMatch.length > 1
          ? fileNameMatch[1]
          : undefined;
      return _observableOf({
        fileName: fileName,
        data: responseBlob as any,
        status: status,
        headers: _headers,
      });
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf<FileResponse>(null as any);
  }
}

@Injectable({
  providedIn: 'root',
})
export class ProjectsClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * @param filter (optional)
   * @param sort (optional) sort
   * @param thenSort (optional) then sort
   * @param pageSize (optional) page size
   * @param page (optional) page
   */
  getAllProjects(
    filter: string | null | undefined,
    sort: string | undefined,
    thenSort: string | undefined,
    pageSize: number | undefined,
    page: number | undefined
  ): Observable<PaginationResultOfProjectGet> {
    let url_ = this.baseUrl + '/api/projects?';
    if (filter !== undefined && filter !== null)
      url_ += 'filter=' + encodeURIComponent('' + filter) + '&';
    if (sort === null) throw new Error("The parameter 'sort' cannot be null.");
    else if (sort !== undefined)
      url_ += 'sort=' + encodeURIComponent('' + sort) + '&';
    if (thenSort === null)
      throw new Error("The parameter 'thenSort' cannot be null.");
    else if (thenSort !== undefined)
      url_ += 'thenSort=' + encodeURIComponent('' + thenSort) + '&';
    if (pageSize === null)
      throw new Error("The parameter 'pageSize' cannot be null.");
    else if (pageSize !== undefined)
      url_ += 'pageSize=' + encodeURIComponent('' + pageSize) + '&';
    if (page === null) throw new Error("The parameter 'page' cannot be null.");
    else if (page !== undefined)
      url_ += 'page=' + encodeURIComponent('' + page) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetAllProjects(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetAllProjects(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<PaginationResultOfProjectGet>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<PaginationResultOfProjectGet>;
        })
      );
  }

  protected processGetAllProjects(
    response: HttpResponseBase
  ): Observable<PaginationResultOfProjectGet> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as PaginationResultOfProjectGet);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf<PaginationResultOfProjectGet>(null as any);
  }

  createProject(model: ProjectPost): Observable<ProjectGet> {
    let url_ = this.baseUrl + '/api/projects';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(model);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processCreateProject(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processCreateProject(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<ProjectGet>;
            }
          } else
            return _observableThrow(response_) as any as Observable<ProjectGet>;
        })
      );
  }

  protected processCreateProject(
    response: HttpResponseBase
  ): Observable<ProjectGet> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status === 201) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result201: any = null;
          result201 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as ProjectGet);
          return _observableOf(result201);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf<ProjectGet>(null as any);
  }

  getProjectById(projectId: string): Observable<ProjectGet> {
    let url_ = this.baseUrl + '/api/projects/{projectId}';
    if (projectId === undefined || projectId === null)
      throw new Error("The parameter 'projectId' must be defined.");
    url_ = url_.replace('{projectId}', encodeURIComponent('' + projectId));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetProjectById(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetProjectById(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<ProjectGet>;
            }
          } else
            return _observableThrow(response_) as any as Observable<ProjectGet>;
        })
      );
  }

  protected processGetProjectById(
    response: HttpResponseBase
  ): Observable<ProjectGet> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 404) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result404: any = null;
          result404 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as ProblemDetails);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result404
          );
        })
      );
    } else if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as ProjectGet);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf<ProjectGet>(null as any);
  }
}

@Injectable({
  providedIn: 'root',
})
export class StatusClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  getStatus(): Observable<StatusGet> {
    let url_ = this.baseUrl + '/api/status';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetStatus(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetStatus(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<StatusGet>;
            }
          } else
            return _observableThrow(response_) as any as Observable<StatusGet>;
        })
      );
  }

  protected processGetStatus(
    response: HttpResponseBase
  ): Observable<StatusGet> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as StatusGet);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf<StatusGet>(null as any);
  }
}

@Injectable({
  providedIn: 'root',
})
export class AuthenticationClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  getAuthenticationMetadata(): Observable<AuthGet> {
    let url_ = this.baseUrl + '/foundation/1.0/auth';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetAuthenticationMetadata(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetAuthenticationMetadata(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<AuthGet>;
            }
          } else
            return _observableThrow(response_) as any as Observable<AuthGet>;
        })
      );
  }

  protected processGetAuthenticationMetadata(
    response: HttpResponseBase
  ): Observable<AuthGet> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as AuthGet);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf<AuthGet>(null as any);
  }
}

@Injectable({
  providedIn: 'root',
})
export class CurrentUserClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  getCurrentUserData(): Observable<UserGet> {
    let url_ = this.baseUrl + '/foundation/1.0/current-user';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetCurrentUserData(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetCurrentUserData(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<UserGet>;
            }
          } else
            return _observableThrow(response_) as any as Observable<UserGet>;
        })
      );
  }

  protected processGetCurrentUserData(
    response: HttpResponseBase
  ): Observable<UserGet> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as UserGet);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as any[]);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf<UserGet>(null as any);
  }
}

@Injectable({
  providedIn: 'root',
})
export class VersionsClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  getApiVersions(): Observable<VersionsGet> {
    let url_ = this.baseUrl + '/foundation/versions';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetApiVersions(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetApiVersions(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<VersionsGet>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<VersionsGet>;
        })
      );
  }

  protected processGetApiVersions(
    response: HttpResponseBase
  ): Observable<VersionsGet> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as VersionsGet);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf<VersionsGet>(null as any);
  }
}

@Injectable({
  providedIn: 'root',
})
export class OpenCdeDownloadClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  getDocumentDiscoveryData(
    documentSelectionData: SelectDocuments
  ): Observable<DocumentDiscoverySessionInitialization> {
    let url_ = this.baseUrl + '/api/opencde/1.0/select-documents';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(documentSelectionData);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetDocumentDiscoveryData(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetDocumentDiscoveryData(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<DocumentDiscoverySessionInitialization>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<DocumentDiscoverySessionInitialization>;
        })
      );
  }

  protected processGetDocumentDiscoveryData(
    response: HttpResponseBase
  ): Observable<DocumentDiscoverySessionInitialization> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as DocumentDiscoverySessionInitialization);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf<DocumentDiscoverySessionInitialization>(null as any);
  }
}

@Injectable({
  providedIn: 'root',
})
export class OpenCdeDownloadIntegrationClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  getDownloadSessionSimpleAuthData(
    documentSessionId: string
  ): Observable<SimpleAuthToken> {
    let url_ =
      this.baseUrl +
      '/api/open-cde-integration/download/sessions/{documentSessionId}/simple-auth';
    if (documentSessionId === undefined || documentSessionId === null)
      throw new Error("The parameter 'documentSessionId' must be defined.");
    url_ = url_.replace(
      '{documentSessionId}',
      encodeURIComponent('' + documentSessionId)
    );
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetDownloadSessionSimpleAuthData(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetDownloadSessionSimpleAuthData(
                response_ as any
              );
            } catch (e) {
              return _observableThrow(e) as any as Observable<SimpleAuthToken>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<SimpleAuthToken>;
        })
      );
  }

  protected processGetDownloadSessionSimpleAuthData(
    response: HttpResponseBase
  ): Observable<SimpleAuthToken> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as SimpleAuthToken);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf<SimpleAuthToken>(null as any);
  }

  setDocumentSelection(
    documentSessionId: string,
    documentSelection: DocumentSelectionPost
  ): Observable<DocumentSelectionGet> {
    let url_ =
      this.baseUrl +
      '/api/open-cde-integration/download/sessions/{documentSessionId}/document-selection';
    if (documentSessionId === undefined || documentSessionId === null)
      throw new Error("The parameter 'documentSessionId' must be defined.");
    url_ = url_.replace(
      '{documentSessionId}',
      encodeURIComponent('' + documentSessionId)
    );
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(documentSelection);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processSetDocumentSelection(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processSetDocumentSelection(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<DocumentSelectionGet>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<DocumentSelectionGet>;
        })
      );
  }

  protected processSetDocumentSelection(
    response: HttpResponseBase
  ): Observable<DocumentSelectionGet> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as DocumentSelectionGet);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf<DocumentSelectionGet>(null as any);
  }

  getDocumentMetadata(documentId: string): Observable<DocumentMetadata> {
    let url_ =
      this.baseUrl +
      '/api/open-cde-integration/download/documents/{documentId}/metadata';
    if (documentId === undefined || documentId === null)
      throw new Error("The parameter 'documentId' must be defined.");
    url_ = url_.replace('{documentId}', encodeURIComponent('' + documentId));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetDocumentMetadata(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetDocumentMetadata(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<DocumentMetadata>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<DocumentMetadata>;
        })
      );
  }

  protected processGetDocumentMetadata(
    response: HttpResponseBase
  ): Observable<DocumentMetadata> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as DocumentMetadata);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf<DocumentMetadata>(null as any);
  }

  getDocumentVersions(documentId: string): Observable<DocumentVersions> {
    let url_ =
      this.baseUrl +
      '/api/open-cde-integration/download/documents/{documentId}/versions';
    if (documentId === undefined || documentId === null)
      throw new Error("The parameter 'documentId' must be defined.");
    url_ = url_.replace('{documentId}', encodeURIComponent('' + documentId));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetDocumentVersions(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetDocumentVersions(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<DocumentVersions>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<DocumentVersions>;
        })
      );
  }

  protected processGetDocumentVersions(
    response: HttpResponseBase
  ): Observable<DocumentVersions> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as DocumentVersions);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf<DocumentVersions>(null as any);
  }

  getDocumentReference(documentId: string): Observable<SelectedDocuments> {
    let url_ =
      this.baseUrl +
      '/api/open-cde-integration/download/documents/{documentId}/reference';
    if (documentId === undefined || documentId === null)
      throw new Error("The parameter 'documentId' must be defined.");
    url_ = url_.replace('{documentId}', encodeURIComponent('' + documentId));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetDocumentReference(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetDocumentReference(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<SelectedDocuments>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<SelectedDocuments>;
        })
      );
  }

  protected processGetDocumentReference(
    response: HttpResponseBase
  ): Observable<SelectedDocuments> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as SelectedDocuments);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf<SelectedDocuments>(null as any);
  }

  getDocumentSelectionData(
    documentSelectionId: string
  ): Observable<DocumentVersion> {
    let url_ =
      this.baseUrl +
      '/api/open-cde-integration/download/document-selections/{documentSelectionId}';
    if (documentSelectionId === undefined || documentSelectionId === null)
      throw new Error("The parameter 'documentSelectionId' must be defined.");
    url_ = url_.replace(
      '{documentSelectionId}',
      encodeURIComponent('' + documentSelectionId)
    );
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetDocumentSelectionData(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetDocumentSelectionData(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<DocumentVersion>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<DocumentVersion>;
        })
      );
  }

  protected processGetDocumentSelectionData(
    response: HttpResponseBase
  ): Observable<DocumentVersion> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as DocumentVersion);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf<DocumentVersion>(null as any);
  }
}

@Injectable({
  providedIn: 'root',
})
export class OpenCdeQueryClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  queryLatestDocumentVersions(
    documentQuery: DocumentQuery
  ): Observable<DocumentDiscoverySessionInitialization> {
    let url_ = this.baseUrl + '/api/opencde/1.0/document-versions';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(documentQuery);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processQueryLatestDocumentVersions(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processQueryLatestDocumentVersions(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<DocumentDiscoverySessionInitialization>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<DocumentDiscoverySessionInitialization>;
        })
      );
  }

  protected processQueryLatestDocumentVersions(
    response: HttpResponseBase
  ): Observable<DocumentDiscoverySessionInitialization> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as DocumentDiscoverySessionInitialization);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf<DocumentDiscoverySessionInitialization>(null as any);
  }
}

@Injectable({
  providedIn: 'root',
})
export class OpenCdeUploadClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  getDocumentDiscoveryData(
    documentUploadData: UploadDocuments
  ): Observable<DocumentUploadSessionInitialization> {
    let url_ = this.baseUrl + '/api/opencde/1.0/upload-documents';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(documentUploadData);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetDocumentDiscoveryData(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetDocumentDiscoveryData(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<DocumentUploadSessionInitialization>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<DocumentUploadSessionInitialization>;
        })
      );
  }

  protected processGetDocumentDiscoveryData(
    response: HttpResponseBase
  ): Observable<DocumentUploadSessionInitialization> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as DocumentUploadSessionInitialization);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf<DocumentUploadSessionInitialization>(null as any);
  }
}

@Injectable({
  providedIn: 'root',
})
export class OpenCdeUploadIntegrationClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  getUploadSessionSimpleAuthData(
    documentSessionId: string
  ): Observable<SimpleAuthToken> {
    let url_ =
      this.baseUrl +
      '/api/open-cde-integration/upload/sessions/{documentSessionId}/simple-auth';
    if (documentSessionId === undefined || documentSessionId === null)
      throw new Error("The parameter 'documentSessionId' must be defined.");
    url_ = url_.replace(
      '{documentSessionId}',
      encodeURIComponent('' + documentSessionId)
    );
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetUploadSessionSimpleAuthData(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetUploadSessionSimpleAuthData(
                response_ as any
              );
            } catch (e) {
              return _observableThrow(e) as any as Observable<SimpleAuthToken>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<SimpleAuthToken>;
        })
      );
  }

  protected processGetUploadSessionSimpleAuthData(
    response: HttpResponseBase
  ): Observable<SimpleAuthToken> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as SimpleAuthToken);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf<SimpleAuthToken>(null as any);
  }

  setProjectForUploadSession(
    documentSessionId: string,
    projectSelection: UploadSessionProjectAssignmentPost
  ): Observable<UploadSessionProjectAssignmentResultGet> {
    let url_ =
      this.baseUrl +
      '/api/open-cde-integration/upload/sessions/{documentSessionId}/project';
    if (documentSessionId === undefined || documentSessionId === null)
      throw new Error("The parameter 'documentSessionId' must be defined.");
    url_ = url_.replace(
      '{documentSessionId}',
      encodeURIComponent('' + documentSessionId)
    );
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(projectSelection);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processSetProjectForUploadSession(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processSetProjectForUploadSession(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<UploadSessionProjectAssignmentResultGet>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<UploadSessionProjectAssignmentResultGet>;
        })
      );
  }

  protected processSetProjectForUploadSession(
    response: HttpResponseBase
  ): Observable<UploadSessionProjectAssignmentResultGet> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as UploadSessionProjectAssignmentResultGet);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf<UploadSessionProjectAssignmentResultGet>(null as any);
  }

  getUploadFileDetails(
    documentSessionId: string,
    uploadFileDetails: UploadFileDetails
  ): Observable<DocumentsToUpload> {
    let url_ =
      this.baseUrl +
      '/api/open-cde-integration/upload/sessions/{documentSessionId}/upload-instructions';
    if (documentSessionId === undefined || documentSessionId === null)
      throw new Error("The parameter 'documentSessionId' must be defined.");
    url_ = url_.replace(
      '{documentSessionId}',
      encodeURIComponent('' + documentSessionId)
    );
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(uploadFileDetails);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetUploadFileDetails(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetUploadFileDetails(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<DocumentsToUpload>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<DocumentsToUpload>;
        })
      );
  }

  protected processGetUploadFileDetails(
    response: HttpResponseBase
  ): Observable<DocumentsToUpload> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as DocumentsToUpload);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf<DocumentsToUpload>(null as any);
  }

  markFileUploadAsCompleted(
    documentSessionId: string,
    sessionFileId: string | null
  ): Observable<DocumentVersion> {
    let url_ =
      this.baseUrl +
      '/api/open-cde-integration/upload/sessions/{documentSessionId}/upload-completion/{sessionFileId}';
    if (documentSessionId === undefined || documentSessionId === null)
      throw new Error("The parameter 'documentSessionId' must be defined.");
    url_ = url_.replace(
      '{documentSessionId}',
      encodeURIComponent('' + documentSessionId)
    );
    if (sessionFileId === undefined || sessionFileId === null)
      throw new Error("The parameter 'sessionFileId' must be defined.");
    url_ = url_.replace(
      '{sessionFileId}',
      encodeURIComponent('' + sessionFileId)
    );
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processMarkFileUploadAsCompleted(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processMarkFileUploadAsCompleted(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<DocumentVersion>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<DocumentVersion>;
        })
      );
  }

  protected processMarkFileUploadAsCompleted(
    response: HttpResponseBase
  ): Observable<DocumentVersion> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result200: any = null;
          result200 =
            _responseText === ''
              ? null
              : (JSON.parse(
                  _responseText,
                  this.jsonParseReviver
                ) as DocumentVersion);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf<DocumentVersion>(null as any);
  }

  markFileUploadAsCancelled(
    documentSessionId: string,
    sessionFileId: string | null
  ): Observable<void> {
    let url_ =
      this.baseUrl +
      '/api/open-cde-integration/upload/sessions/{documentSessionId}/upload-cancellation/{sessionFileId}';
    if (documentSessionId === undefined || documentSessionId === null)
      throw new Error("The parameter 'documentSessionId' must be defined.");
    url_ = url_.replace(
      '{documentSessionId}',
      encodeURIComponent('' + documentSessionId)
    );
    if (sessionFileId === undefined || sessionFileId === null)
      throw new Error("The parameter 'sessionFileId' must be defined.");
    url_ = url_.replace(
      '{sessionFileId}',
      encodeURIComponent('' + sessionFileId)
    );
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({}),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processMarkFileUploadAsCancelled(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processMarkFileUploadAsCancelled(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<void>;
            }
          } else return _observableThrow(response_) as any as Observable<void>;
        })
      );
  }

  protected processMarkFileUploadAsCancelled(
    response: HttpResponseBase
  ): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return _observableOf<void>(null as any);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          let result400: any = null;
          result400 =
            _responseText === ''
              ? null
              : (JSON.parse(_responseText, this.jsonParseReviver) as ApiError);
          return throwException(
            'A server side error occurred.',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf<void>(null as any);
  }
}

export interface LoginPost {
  identifier: string;
  password: string;
  staySignedIn?: boolean;
}

export interface TokenResponseGet {
  accessToken?: string | undefined;
  error?: string | undefined;
  errorDescription?: string | undefined;
  expiresIn?: number;
  httpErrorReason?: string | undefined;
  httpStatusCode?: HttpStatusCode;
  identityToken?: string | undefined;
  isError?: boolean;
  refreshToken?: string | undefined;
  tokenType?: string | undefined;
  errorType?: ResponseErrorType;
}

export enum HttpStatusCode {
  Continue = 'Continue',
  SwitchingProtocols = 'SwitchingProtocols',
  Processing = 'Processing',
  EarlyHints = 'EarlyHints',
  OK = 'OK',
  Created = 'Created',
  Accepted = 'Accepted',
  NonAuthoritativeInformation = 'NonAuthoritativeInformation',
  NoContent = 'NoContent',
  ResetContent = 'ResetContent',
  PartialContent = 'PartialContent',
  MultiStatus = 'MultiStatus',
  AlreadyReported = 'AlreadyReported',
  IMUsed = 'IMUsed',
  MultipleChoices = 'Ambiguous',
  Ambiguous = 'Moved',
  MovedPermanently = 'Redirect',
  Moved = 'RedirectMethod',
  Found = 'NotModified',
  Redirect = 'UseProxy',
  SeeOther = 'Unused',
  RedirectMethod = 'TemporaryRedirect',
  NotModified = 'PermanentRedirect',
  UseProxy = 'BadRequest',
  Unused = 'Unauthorized',
  TemporaryRedirect = 'PaymentRequired',
  RedirectKeepVerb = 'Forbidden',
  PermanentRedirect = 'NotFound',
  BadRequest = 'MethodNotAllowed',
  Unauthorized = 'NotAcceptable',
  PaymentRequired = 'ProxyAuthenticationRequired',
  Forbidden = 'RequestTimeout',
  NotFound = 'Conflict',
  MethodNotAllowed = 'Gone',
  NotAcceptable = 'LengthRequired',
  ProxyAuthenticationRequired = 'PreconditionFailed',
  RequestTimeout = 'RequestEntityTooLarge',
  Conflict = 'RequestUriTooLong',
  Gone = 'UnsupportedMediaType',
  LengthRequired = 'RequestedRangeNotSatisfiable',
  PreconditionFailed = 'ExpectationFailed',
  RequestEntityTooLarge = 'MisdirectedRequest',
  RequestUriTooLong = 'UnprocessableEntity',
  UnsupportedMediaType = 'Locked',
  RequestedRangeNotSatisfiable = 'FailedDependency',
  ExpectationFailed = 'UpgradeRequired',
  MisdirectedRequest = 'PreconditionRequired',
  UnprocessableEntity = 'TooManyRequests',
  Locked = 'RequestHeaderFieldsTooLarge',
  FailedDependency = 'UnavailableForLegalReasons',
  UpgradeRequired = 'InternalServerError',
  PreconditionRequired = 'NotImplemented',
  TooManyRequests = 'BadGateway',
  RequestHeaderFieldsTooLarge = 'ServiceUnavailable',
  UnavailableForLegalReasons = 'GatewayTimeout',
  InternalServerError = 'HttpVersionNotSupported',
  NotImplemented = 'VariantAlsoNegotiates',
  BadGateway = 'InsufficientStorage',
  ServiceUnavailable = 'LoopDetected',
  GatewayTimeout = 'NotExtended',
  HttpVersionNotSupported = 'NetworkAuthenticationRequired',
}

/** Various reasons for a protocol endpoint error */
export enum ResponseErrorType {
  None = 'None',
  Protocol = 'Protocol',
  Http = 'Http',
  Exception = 'Exception',
  PolicyViolation = 'PolicyViolation',
}

export interface TokenLoginPost {
  identifier: string;
  password: string;
}

export interface TokenRefreshPost {
  refreshToken: string;
}

/** Data transfer class to convey api errors */
export interface ApiError {
  /** This dictionary contains a set of all errors and their messages */
  errors?: { [key: string]: string[] } | undefined;
}

export interface RegisterPost {
  username: string;
  email: string;
  password: string;
  preferredLanguages?: string[] | undefined;
}

export interface ForgotPasswordPost {
  identifier: string;
  preferredLanguages?: string[] | undefined;
}

export interface PaginationResultOfDocumentGet {
  page?: number;
  pageSize?: number;
  totalCount?: number;
  data?: DocumentGet[] | undefined;
}

export interface DocumentGet {
  id: string;
  projectId: string;
  name: string;
  description?: string | undefined;
  createdAtUtc: Date;
  contentAvailable: boolean;
  fileName?: string | undefined;
  fileSizeInBytes?: number | undefined;
}

/** A machine-readable format for specifying errors in HTTP API responses based on https://tools.ietf.org/html/rfc7807. */
export interface ProblemDetails {
  /** A URI reference [RFC3986] that identifies the problem type. This specification encourages that, when
dereferenced, it provide human-readable documentation for the problem type
(e.g., using HTML [W3C.REC-html5-20141028]).  When this member is not present, its value is assumed to be
"about:blank". */
  type?: string | undefined;
  /** A short, human-readable summary of the problem type.It SHOULD NOT change from occurrence to occurrence
of the problem, except for purposes of localization(e.g., using proactive content negotiation;
see[RFC7231], Section 3.4). */
  title?: string | undefined;
  /** The HTTP status code([RFC7231], Section 6) generated by the origin server for this occurrence of the problem. */
  status?: number | undefined;
  /** A human-readable explanation specific to this occurrence of the problem. */
  detail?: string | undefined;
  /** A URI reference that identifies the specific occurrence of the problem.It may or may not yield further information if dereferenced. */
  instance?: string | undefined;
  /** Gets the IDictionary`2 for extension members.

Problem type definitions MAY extend the problem details object with additional members. Extension members appear in the same namespace as
other members of a problem type. */
  extensions?: { [key: string]: any } | undefined;
}

export interface DocumentPost {
  name: string;
  description?: string | undefined;
}

export interface DocumentContentPreparationPost {
  fileName: string;
  contentType: string;
  sizeInBytes: number;
}

export interface DocumentContentSasUploadResultGet {
  sasUploadLink: SasUploadLink;
  customHeaders: DocumentContentSasUploadResultHeaderGet[];
}

/** This class represents an Azure Blob SAS url, which can be used to directly allow a client to upload a file directly to Azure without having to proxy it through the actual service */
export interface SasUploadLink {
  /** The Azure Blob upload link */
  uploadLink?: string | undefined;
  /** When the link expires */
  validUntil?: Date;
}

export interface DocumentContentSasUploadResultHeaderGet {
  name: string;
  value: string;
}

export interface FrontendConfigGet {
  danglIconsBaseUrl: string;
  danglIdentityUrl: string;
  applicationInsightsInstrumentationKey?: string | undefined;
  environment: string;
  danglIdentityClientId: string;
  requiredScope: string;
}

export interface PaginationResultOfProjectGet {
  page?: number;
  pageSize?: number;
  totalCount?: number;
  data?: ProjectGet[] | undefined;
}

export interface ProjectGet {
  id: string;
  name: string;
  description?: string | undefined;
  identiconId: string;
}

export interface ProjectPost {
  name?: string | undefined;
  description?: string | undefined;
}

export interface StatusGet {
  isHealthy: boolean;
  version: string;
  informationalVersion: string;
  environment: string;
}

export interface AuthGet {
  oauth2_auth_url?: string | undefined;
  oauth2_token_url?: string | undefined;
  oauth2_dynamic_client_reg_url?: string | undefined;
  http_basic_supported?: boolean;
  supported_oauth2_flows: string[];
  oauth2_required_scopes?: string | undefined;
}

export interface UserGet {
  id?: string | undefined;
  name?: string | undefined;
}

export interface VersionsGet {
  versions: VersionGet[];
}

export interface VersionGet {
  api_id: string;
  version_id: string;
  detailed_version?: string | undefined;
  api_base_url?: string | undefined;
}

export interface DocumentDiscoverySessionInitialization {
  select_documents_url: string;
  expires_in: number;
}

export interface SelectDocuments {
  callback: CallbackLink;
  server_context?: string | undefined;
  supported_file_extensions?: string[] | undefined;
}

export interface CallbackLink {
  url: string;
  expires_in: number;
}

export interface SimpleAuthToken {
  jwt: string;
  expiresAt: number;
}

export interface DocumentSelectionGet {
  callbackUrl: string;
}

export interface DocumentSelectionPost {
  documentId: string;
}

export interface DocumentMetadata {
  metadata: DocumentMetadataEntry[];
}

export interface DocumentMetadataEntry {
  name: string;
  value: string[];
  data_type: DataTypeEnum;
}

export enum DataTypeEnum {
  StringEnum = 'string',
  BooleanEnum = 'boolean',
  DateTimeEnum = 'date-time',
  DateEnum = 'date',
  Integer32Enum = 'integer32',
  Integer64Enum = 'integer64',
  NumberEnum = 'number',
  UrlEnum = 'url',
}

export interface DocumentVersions {
  documents: DocumentVersion[];
}

export interface DocumentVersion {
  links: DocumentVersionLinks;
  version_number: string;
  version_index: number;
  creation_date: Date;
  title: string;
  file_description: FileDescription;
  document_id: string;
}

export interface DocumentVersionLinks {
  document_version: LinkData;
  document_version_metadata: LinkData;
  document_version_download: LinkData;
  document_versions: LinkData;
  document_details?: LinkData | undefined;
}

export interface LinkData {
  url: string;
}

export interface FileDescription {
  name: string;
  size_in_bytes: number;
}

export interface SelectedDocuments {
  server_context?: string | undefined;
  documents: DocumentVersion[];
}

export interface DocumentQuery {
  document_ids: string[];
}

export interface DocumentUploadSessionInitialization {
  upload_ui_url: string;
  expires_in: number;
  max_size_in_bytes: number;
}

export interface UploadDocuments {
  callback: CallbackLink;
  server_context?: string | undefined;
  files: FileToUpload[];
}

export interface FileToUpload {
  file_name: string;
  session_file_id: string;
  document_id?: string | undefined;
}

export interface UploadSessionProjectAssignmentResultGet {
  clientCallbackUrl: string;
}

export interface UploadSessionProjectAssignmentPost {
  projectId: string;
}

export interface DocumentsToUpload {
  server_context?: string | undefined;
  documents_to_upload: DocumentToUpload[];
}

export interface DocumentToUpload {
  session_file_id: string;
  upload_file_parts: UploadFilePartInstruction[];
  upload_completion: LinkData;
  upload_cancellation: LinkData;
}

export interface UploadFilePartInstruction {
  url: string;
  http_method: HttpMethodEnum;
  additional_headers?: Headers | undefined;
  include_authorization?: boolean;
  multipart_form_data?: MultipartFormData | undefined;
  content_range_start: number;
  content_range_end: number;
}

export enum HttpMethodEnum {
  POSTEnum = 'POST',
  PUTEnum = 'PUT',
}

export interface Headers {
  values: HeaderValue[];
}

export interface HeaderValue {
  name: string;
  value: string;
}

export interface MultipartFormData {
  prefix: string;
  suffix: string;
}

export interface UploadFileDetails {
  files: UploadFileDetail[];
}

export interface UploadFileDetail {
  size_in_bytes: number;
  session_file_id: string;
}

export interface FileParameter {
  data: any;
  fileName: string;
}

export interface FileResponse {
  data: Blob;
  status: number;
  fileName?: string;
  headers?: { [name: string]: any };
}

export class ApiException extends Error {
  message: string;
  status: number;
  response: string;
  headers: { [key: string]: any };
  result: any;

  constructor(
    message: string,
    status: number,
    response: string,
    headers: { [key: string]: any },
    result: any
  ) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(
  message: string,
  status: number,
  response: string,
  headers: { [key: string]: any },
  result?: any
): Observable<any> {
  if (result !== null && result !== undefined) return _observableThrow(result);
  else
    return _observableThrow(
      new ApiException(message, status, response, headers, null)
    );
}

function blobToText(blob: any): Observable<string> {
  return new Observable<string>((observer: any) => {
    if (!blob) {
      observer.next('');
      observer.complete();
    } else {
      let reader = new FileReader();
      reader.onload = (event) => {
        observer.next((event.target as any).result);
        observer.complete();
      };
      reader.readAsText(blob);
    }
  });
}
